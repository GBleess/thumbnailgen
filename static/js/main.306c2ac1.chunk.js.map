{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Upload","handleChangeFile","downloadUrl","type","onChange","href","download","EditorCanvas","renderedText","imgSrc","changeFile","editedImgSrc","console","log","useEffect","Jimp","read","err","imgLoaded","a","async","bottomX","bottomY","shadowOffset","textCanvasHeight","textCanvasWidth","rgbaToInt","transparentColor","textCanvas","resize","loadFont","font","orangeColorHexInverse","hex","slice","hexString","Number","toString","substr","toUpperCase","invertHex","color","apply","params","invert","print","compositBottomY","getHeight","composite","getBase64Async","MIME_PNG","imgBase64","src","alt","App","imgSrc2","useState","fileUrl","setfileUrl","editedFileUrl","setEditedfileUrl","className","url","event","URL","createObjectURL","target","files","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.306c2ac1.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Jimp from 'jimp';\n\nconst App: React.FC = () => {\n  let imgSrc2 = 'https://w0.pngwave.com/png/132/811/bitcoin-cryptocurrency-blockchain-sticker-laptop-bitcoin-png-clip-art.png';\n  const [fileUrl, setfileUrl] = useState(imgSrc2)\n  const [editedFileUrl, setEditedfileUrl] = useState(imgSrc2)\n\n  const handleChangeFile: React.ChangeEventHandler<HTMLInputElement> = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const url = URL.createObjectURL((event as any).target.files[0])\n    console.log(`URL : ${url}`);\n    setfileUrl(url)\n  }\n\n  const changeFile = (url:string) => {\n    setEditedfileUrl(url);\n  }\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <EditorCanvas renderedText={'비트코인 100억 간다'} imgSrc={fileUrl} changeFile={changeFile} editedImgSrc={editedFileUrl}/>\n        <Upload handleChangeFile={handleChangeFile} downloadUrl={editedFileUrl}/>\n      </header>\n    </div>\n  );\n}\n\ninterface UploadProps {\n  handleChangeFile: (event: React.ChangeEvent<HTMLInputElement>) => (any);\n  downloadUrl: string;\n}\n\nconst Upload: React.FC<UploadProps> = ({handleChangeFile, downloadUrl}) => {\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleChangeFile}/>\n      <a href={downloadUrl} download=\"thumbnail\">다운로드</a>\n    </div>\n  )\n}\n\n\ninterface CanvasProps {\n  renderedText: string;\n  imgSrc: string;\n  changeFile: (url:string) => (void);\n  editedImgSrc: string;\n}\n\nconst EditorCanvas: React.FC<CanvasProps> = ({ renderedText, imgSrc, changeFile, editedImgSrc}) => {\n\n\n  console.log(imgSrc);\n  useEffect(()=> {\n    Jimp.read(imgSrc, async (err, imgLoaded) => {\n      \n      const fontHeight = 50;\n      const bottomX = 10\n      const bottomY = 0;\n      const shadowOffset = 2;\n      // get text\n      console.log(`[TEXT FROM PROPS]${renderedText}`)\n\n      \n      const textCanvasHeight = 100;\n      const textCanvasWidth = 300;\n      let transparentColor: number = await (Jimp as any).rgbaToInt(100, 100, 0, 0.5);\n      let textCanvas = await new Jimp(textCanvasWidth, textCanvasHeight, transparentColor);\n      // img resize\n      await imgLoaded.resize(1280, 720);\n      // load font\n      // const fontPath = `${process.env.PUBLIC_URL}/nanum/nanum.fnt`;\n      const fontPath = `./nanum/nanum.fnt`;      \n      let font = await Jimp.loadFont(fontPath);\n      // print text to the bottom line\n\n      const invertHex = (hex: string) => {\n        hex = hex.slice(1);\n        let hexString = (Number(`0x1${hex}`) ^ 0xFFFFFF).toString(16).substr(1).toUpperCase();\n        return `#${hexString}`\n      }\n      let orangeColor = '#ffd042'\n      let orangeColorHexInverse = invertHex(orangeColor); // Returns FF00FF\n      // let orangeColorHexInverse = invertHex('edc261'); // Returns FF00FF\n\n      // print shadow of the all text\n      await textCanvas.color([{ apply: 'xor', params:['#000000']}])\n        .invert()\n        .print(font, bottomX + shadowOffset, bottomY + shadowOffset, renderedText)\n        .color([{ apply: 'xor', params:['#ffffff']}])\n\n      // print text\n        .color([{ apply: 'xor', params:[orangeColor]}])\n        .invert()\n        .print(font, bottomX, bottomY, renderedText)\n        .color([{ apply: 'xor', params:[orangeColorHexInverse]}])\n\n        .color([{ apply: 'xor', params:['#ffffff']}])\n        .invert()\n        .print(font, bottomX, bottomY, renderedText.slice(0,2))\n        .color([{ apply: 'xor', params:['#000000']}])\n        \n      \n      // resize text\n      await textCanvas.resize(textCanvasWidth*2, textCanvasHeight*2);\n      const compositBottomX = 10;\n      const compositBottomY = imgLoaded.getHeight() - textCanvasHeight\n      await imgLoaded.composite(textCanvas, compositBottomX, compositBottomY);\n\n      // get base64 encoded imge to use in the img component\n      // let imgBase64 = await textCanvas.getBase64Async(Jimp.MIME_PNG);\n      // setEditedImgSrc(imgBase64);\n      let imgBase64 = await imgLoaded.getBase64Async(Jimp.MIME_PNG);\n      // setEditedImgSrc(imgBase64);\n      changeFile(imgBase64);\n    })\n    \n  }, [imgSrc])\n\n  return (\n    <div>\n      <img src={editedImgSrc} alt=\"editorImg\" />\n    </div>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}