{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["nanumFontPath","ImgDrop","changeFile","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","readAsDataURL","onload","dataUrl","result","useDropzone","getRootProps","getInputProps","style","width","height","Upload","handleChangeFile","downloadUrl","type","onChange","href","download","createColoredText","font","fullText","color","coloredText","a","async","from","indexOf","length","textCanvasHeight","textCanvasWidth","Jimp","rgbaToInt","transparentColor","textCanvas3","wi","measureText","slice","print","apply","params","EditorCanvas","fontPath","renderedText","renderedText2","imgSrc","editedImgSrc","useEffect","read","err","imgLoaded","shadowOffset","textCanvas","resize","loadFont","orangeColor","whiteColor","blackColor","separator","shadow","text2","text3","separator2","shadow2","text22","text32","secondOffset","firstOffset","textCanvasIndent","composite","compositBottomY","getHeight","getBase64Async","MIME_PNG","imgBase64","src","alt","App","useState","fileUrl","setfileUrl","editedFileUrl","setEditedfileUrl","newText","setNewText","newText2","setNewText2","setRenderedText","setRenderedText2","setFontPath","className","url","event","URL","createObjectURL","target","files","value","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32fc91cc.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport Jimp from 'jimp';\nimport { useDropzone } from 'react-dropzone';\nimport './App.css';\n\nconst defaultSource = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT5XlCdYS6OP0Q5RENKnhkXWDsgfzlvssygvZul1efZtA7v9AtjKA&s';\nconst nanumFontPath = `./nanum-barun-gothic-100/nanum100bg.fnt`;\nconst spocaSansFontPath = `./spoca-han-sans/spocahansans.fnt`;\n\nconst App: React.FC = () => {\n  const [fileUrl, setfileUrl] = useState('')\n  const [editedFileUrl, setEditedfileUrl] = useState('')\n  const [newText, setNewText] = useState('');\n  const [newText2, setNewText2] = useState('');\n  const [renderedText, setRenderedText] = useState('');\n  const [renderedText2, setRenderedText2] = useState('');\n\n  const [fontPath, setFontPath] = useState(nanumFontPath);\n\n  const handleChangeFile: React.ChangeEventHandler<HTMLInputElement> = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const url = URL.createObjectURL((event as any).target.files[0])\n    console.log(`URL : ${url}`);\n    setfileUrl(url)\n  }\n\n  const changeEditedFile = (url: string) => {\n    setEditedfileUrl(url);\n  }\n\n  const onClickGenerate = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    setRenderedText(newText);\n    setRenderedText2(newText2);\n    console.log(\"im clicked\");\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        { fileUrl ? <EditorCanvas fontPath={fontPath} renderedText={renderedText} renderedText2={renderedText2} imgSrc={fileUrl} changeFile={changeEditedFile} editedImgSrc={editedFileUrl} /> : <ImgDrop changeFile={(file) => setfileUrl(file)}/>}\n        <Upload handleChangeFile={handleChangeFile} downloadUrl={editedFileUrl} />\n        <input value={newText} onChange={(event) => setNewText(event.target.value)} />\n        <input value={newText2} onChange={(event) => setNewText2(event.target.value)} />\n        <button onClick={onClickGenerate}>적용</button>\n        <button onClick={()=> fontPath === nanumFontPath ? setFontPath(spocaSansFontPath) : setFontPath(nanumFontPath)} >폰트 전환</button>\n      </header>\n    </div>\n  );\n}\n\ninterface ImgDropProps {\n  changeFile: (file: string) => void;\n}\n\nconst ImgDrop: React.FC<ImgDropProps> = ({changeFile}) => {\n\n  const onDrop = useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file: File) => {\n      const reader = new FileReader()\n      reader.onabort = () => console.log(\"file reading has aborted\")\n      reader.onerror = () => console.log(\"file reading has failed\")\n      reader.readAsDataURL(file)\n      reader.onload = () => {\n        const dataUrl = reader.result\n        if (typeof dataUrl === \"string\") {\n          changeFile(dataUrl)\n        }\n      }\n    });\n  }, [])\n\n  const {getRootProps, getInputProps} = useDropzone({onDrop})\n\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()}/>\n      <div style={{width:\"1280px\", height: \"720px\"}}>\n        <p>파일을 올려주세요</p>\n      </div>\n    </div>\n  )\n}\n\ninterface UploadProps {\n  handleChangeFile: (event: React.ChangeEvent<HTMLInputElement>) => (any);\n  downloadUrl: string;\n}\n\nconst Upload: React.FC<UploadProps> = ({ handleChangeFile, downloadUrl }) => {\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleChangeFile} />\n      <a href={downloadUrl} download=\"thumbnail\">다운로드</a>\n    </div>\n  )\n}\n\n\ninterface CanvasProps {\n  renderedText: string;\n  renderedText2: string;\n  imgSrc: string;\n  editedImgSrc: string;\n  fontPath: string;\n\n  changeFile: (url: string) => (void);\n}\n\nconst createColoredText = async (font: any, fullText: string, color: string, coloredText: string) => {\n  let from = fullText.indexOf(coloredText);\n  let to = from + coloredText.length;\n\n  const textCanvasHeight = 140;\n  const textCanvasWidth = 1000;\n\n  let transparentColor: number = await (Jimp as any).rgbaToInt(100, 100, 0, 0.5);\n  let textCanvas3 = await new Jimp(textCanvasWidth, textCanvasHeight, transparentColor);\n\n  let wi = Jimp.measureText(font, fullText.slice(0, from));\n  // let he = Jimp.measureTextHeight(font, fullText.slice(0, from), wi);\n\n  return (await textCanvas3.print(font, wi, 0, coloredText).color([{ apply: 'xor', params: [color] }]));\n}\nconst EditorCanvas: React.FC<CanvasProps> = ({ fontPath, renderedText, renderedText2, imgSrc, changeFile, editedImgSrc }) => {\n\n  useEffect(() => {\n    Jimp.read(imgSrc, async (err, imgLoaded) => {\n\n      const fontHeight = 50;\n      const bottomX = 10\n      const bottomY = 0;\n      const shadowOffset = 4;\n      // get text\n      console.log(`[TEXT FROM PROPS]${renderedText}`)\n\n\n      const textCanvasHeight = 500;\n      const textCanvasWidth = 1000;\n      let transparentColor: number = await (Jimp as any).rgbaToInt(100, 100, 0, 0.5);\n      let textCanvas = await new Jimp(textCanvasWidth, textCanvasHeight, transparentColor);\n      // img resize\n      await imgLoaded.resize(1280, 720);\n      // load font\n      // const fontPath = `${process.env.PUBLIC_URL}/nanum/nanum.fnt`;\n      \n      let font = await Jimp.loadFont(fontPath);\n      // print text to the bottom line\n\n      let orangeColor = '#ffd042'\n      let whiteColor = '#ffffff'\n      let blackColor = '#000000'\n\n      // first line\n      let separator = renderedText.indexOf(' ');\n      let shadow = await createColoredText(font, renderedText, blackColor, renderedText);\n      let text2 = await createColoredText(font, renderedText, whiteColor, renderedText.slice(0, separator));\n      let text3 = await createColoredText(font, renderedText, orangeColor, renderedText.slice(separator));\n      \n\n      let separator2 = renderedText2.indexOf(' ');\n      let shadow2 = await createColoredText(font, renderedText2, blackColor, renderedText2);\n      let text22 = await createColoredText(font, renderedText2, orangeColor, renderedText2.slice(0, separator2));\n      let text32 = await createColoredText(font, renderedText2, whiteColor, renderedText2.slice(separator2));\n\n      let secondOffset = textCanvasHeight - 100;\n      let firstOffset = textCanvasHeight - 200;\n      let textCanvasIndent  = 5\n      await textCanvas.composite(shadow, shadowOffset, shadowOffset + firstOffset);\n      await textCanvas.composite(text2, textCanvasIndent,  firstOffset);\n      await textCanvas.composite(text3, textCanvasIndent,  firstOffset);\n\n      await textCanvas.composite(shadow2, shadowOffset, shadowOffset + secondOffset);\n      await textCanvas.composite(text22, textCanvasIndent, secondOffset);\n      await textCanvas.composite(text32, textCanvasIndent, secondOffset);\n\n      // resize text\n      const compositBottomX = 10;\n      const compositBottomY = imgLoaded.getHeight() - textCanvasHeight - 10\n      await imgLoaded.composite(textCanvas, compositBottomX, compositBottomY);\n\n\n      let imgBase64 = await imgLoaded.getBase64Async(Jimp.MIME_PNG);\n      changeFile(imgBase64);\n    })\n\n  }, [imgSrc, renderedText, renderedText2, fontPath])\n\n  return (\n    <div>\n      <img width=\"1280px\" height=\"720px\" src={editedImgSrc} alt=\"editorImg\" />\n    </div>\n  )\n}\nconst invertHex = (hex: string) => {\n  hex = hex.slice(1);\n  let hexString = (Number(`0x1${hex}`) ^ 0xFFFFFF).toString(16).substr(1).toUpperCase();\n  return `#${hexString}`\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}